# Pokemon Pocket Trade Finder
Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## Project Context
 A web application that will allow users to find pokemon pocket tcg cards for trade. Users can sign up with their unique friend ID and then mark cards they have for trade. Other users can then search for cards they need and contact the card owner to complete the trade.

## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure repository files as follows:

```
├── public/
├── src/
    ├── app/        
        ├── api/            # Api Routes
            ├── sample-route/     # name of the route
                ├── route.ts      
        ├── components/     # Shared React components
        ├── utils/          # Helper functions
        ├── types/          # TypeScript types
        └── lib/            # Shared libraries
        ├── globals.css
        ├── layout.tsx
        ├── page.tsx
├── eslint.config.ts
├── jest.config.ts
├── next.config.ts
├── tailwind.config.ts
├── tsconfig.json
├── package.json
```

## Tech Stack
Frontend : Next.js 14 (App Router)
Styling: Tailwind CSS
Hosting: Vercel
Database: Cloud Firestore
Authentication: Clerk + Firebase

## API Routes Documentation
+ 
+ ### Card Discovery & Catalog Routes
+ 
+ #### GET /api/cards
+ - Fetches all cards from all packs
+ - Sorts cards by pack order (Genetic Apex A1 first, then Mythical Islands A2)
+ - Returns array of CardPreview: { id, image_url, name, pack, rarity }
+ 
+ #### GET /api/cards/[pack]/[id]
+ - Fetches detailed information for a specific card
+ - Parameters: 
+   - pack: Pack name (e.g., "Genetic Apex A1")
+   - id: Card number within pack
+ - Returns detailed card information
+ 
+ #### GET /api/cards/[pack]/[id]/trading-users
+ - Fetches all users who have this specific card available for trade
+ - Returns array of users with their friend codes and wishlists
+ 
+ ### User Management Routes
+ 
+ #### /api/users/me/friend-code
+ - GET: Check if current user has set their friend code
+ - POST: Set user's friend code (format: XXXX-XXXX-XXXX-XXXX)
+ - Validates friend code format
+ - Creates/updates user document with initial trade data
+ 
+ #### /api/users/me/cards-for-trade
+ - GET: Fetch current user's cards available for trade
+ - POST: Mark a card as available for trade
+ - DELETE: Remove a card from trade
+ - Updates both user document and cards-for-trade collection
+ 
+ ### Trade Management Routes
+ 
+ #### POST /api/users/trades/propose
+ - Creates a new trade proposal between users
+ - Body: { friendId, cardToTrade, cardToReceive, message }
+ - Updates both users' trade lists:
+   - Adds to proposer's 'proposed' array
+   - Adds to receiver's 'requests' array
+ 
+ ### Webhook Routes
+ 
+ #### POST /api/webhook/clerk
+ - Handles Clerk authentication webhooks
+ - Syncs user data between Clerk and Firebase
+ - Events:
+   - user.created: Creates Firebase user and initial Firestore document
+   - user.updated: Updates Firebase user data
+   - user.deleted: Removes user from Firebase and Firestore

## Firestore Database Structure
- Users (collection)
    - user_id (document)
        - friendCode: "123456" (string)
        - cardsForTrade: ["genetic-apex-a1-1", "genetic-apex-a1-2"] (array of strings)
        - wishlist: ["genetic-apex-a1-1", "genetic-apex-a1-2"] (array of strings)
        - trades: { 
            proposed: [{ 
                friendId: "123456", (string)
                cardToTrade: "genetic-apex-a1-1", (string)
                cardToReceive: "genetic-apex-a1-1", (string)
                timestamp: "2024-01-01", (string)
                message: "Hello" (string)
            }], 
            requests: [
                { 
                    friendId: "123456", (string)
                    cardToTrade: "genetic-apex-a1-1", (string)
                    cardToReceive: "genetic-apex-a1-1", (string)
                    timestamp: "2024-01-01", (string)
                    message: "Hello" (string)
                }
            ] 
        } (object)
- cards-for-trade (collection)
    - {packId}-{cardId} (document) // e.g., "genetic-apex-a1-1"
        - {userId} (field)
- packs (collection)
    - genetic-apex-a1 (document)
        - 1 (field -> corresdponds to one card)
            image_url: "https://limitlesstcg.nyc3.cdn.digitaloceanspaces.com/pocket/A1/A1_001_EN.webp" (string)
            name: "Bulbasaur" (string)
            pack: "Genetic Apex A1" (string)
            rarity: "1 Diamond" (string)

## IMPORTANT
- ALL Database actions should be done in a secure API route, not on the frontend.

## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/form-wizard)
- Favor named exports for components and utilities
- Use PascalCase for component files (e.g., VisaForm.tsx)
- Use camelCase for utility files (e.g., formValidator.ts)
- Jest test files should be placed next to the file they are testing
- Jest test files should be named [filename].test.ts
- Add new pages in the src/app directory in their own subdirectory following the naming convention [page-name]/page.tsx

## NextJS Usage
- Include "use client" for all client side component suggestions
- Only keep one version of config files and prefer config files that are .ts

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces
- Use absolute imports for all files @/app/...
- Avoid try/catch blocks unless there's good reason to translate or handle error in that abstraction
- Use explicit return types for all functions

## State Management
- Use React Context for global state when needed
- Implement proper cleanup in useEffect hooks

## Packages
- Verify that any package suggestions actually exist in npm

## Syntax and Formatting
- Use "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals
- Use declarative JSX
- Implement proper TypeScript discriminated unions for message types

## UI and Styling
- Implement Tailwind CSS for styling
- Preference for putting css classes in a module.css file next to the component the styles are for

## Error Handling
- Implement proper error boundaries
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle network failures gracefully

## Security
- Implement Content Security Policy
- Sanitize user inputs
- Handle sensitive data properly
- Implement proper CORS handling

## Development Workflow
- Use proper version control
- Implement proper code review process
- Test in multiple environments
- Follow semantic versioning for releases
- Maintain changelog